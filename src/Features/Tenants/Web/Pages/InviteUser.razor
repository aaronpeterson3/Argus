@page "/tenants/{TenantId}/invite"
@using Argus.Features.Tenants.Web.Services
@inject ITenantService TenantService
@inject NavigationManager Navigation

<div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <div class="px-4 py-6 sm:px-0">
        <div class="border-4 border-gray-200 rounded-lg p-8">
            <h1 class="text-2xl font-semibold text-gray-900">Invite User</h1>

            <EditForm Model="@model" OnValidSubmit="HandleSubmit" class="space-y-8 divide-y divide-gray-200 mt-6">
                <DataAnnotationsValidator />

                <div class="space-y-6">
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700">Email Address</label>
                        <div class="mt-1">
                            <InputText id="email" type="email" @bind-Value="model.Email"
                                class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                        </div>
                    </div>

                    <div>
                        <label for="role" class="block text-sm font-medium text-gray-700">Role</label>
                        <div class="mt-1">
                            <InputSelect id="role" @bind-Value="model.Role"
                                class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="User">User</option>
                                <option value="Admin">Admin</option>
                            </InputSelect>
                        </div>
                    </div>
                </div>

                <div class="pt-6">
                    <div class="flex justify-end">
                        <button type="button" @onclick="() => Navigation.NavigateTo($"/tenants/{TenantId}/users")"
                            class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Cancel
                        </button>
                        <button type="submit"
                            class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Send Invite
                        </button>
                    </div>
                </div>

                <ValidationSummary />
            </EditForm>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="mt-4 rounded-md bg-green-50 p-4">
                    <div class="flex">
                        <div class="ml-3">
                            <p class="text-sm font-medium text-green-800">@message</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string TenantId { get; set; }

    private InviteUserModel model = new();
    private string message;

    private async Task HandleSubmit()
    {
        var result = await TenantService.InviteUserAsync(TenantId, model.Email, model.Role);
        if (result.IsSuccess)
        {
            message = "Invitation sent successfully";
            model = new InviteUserModel();
        }
        else
        {
            message = result.Error;
        }
    }

    private class InviteUserModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Role { get; set; } = "User";
    }
}